<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Browse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CloseCaps" xml:space="preserve">
    <value>CLOSE</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="CopyClipboard" xml:space="preserve">
    <value>Copy to clipboard</value>
  </data>
  <data name="CopyWords" xml:space="preserve">
    <value>Copy words</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateFolder" xml:space="preserve">
    <value>Create a new folder</value>
  </data>
  <data name="CreateFromSeed" xml:space="preserve">
    <value>Create from seed</value>
  </data>
  <data name="CreateKeyEntry" xml:space="preserve">
    <value>Create new key entry</value>
  </data>
  <data name="DeleteKeyEntry" xml:space="preserve">
    <value>Delete the key entry</value>
  </data>
  <data name="DeleteKeyEntryConfirmation" xml:space="preserve">
    <value>Do you confirm the key entry deletion?</value>
  </data>
  <data name="DerivatePassword" xml:space="preserve">
    <value>Derivate a Key from a Password (using RFC 2898)</value>
  </data>
  <data name="Directories" xml:space="preserve">
    <value>Directories</value>
  </data>
  <data name="DocumentGenerated" xml:space="preserve">
    <value>Document generated with</value>
  </data>
  <data name="Drives" xml:space="preserve">
    <value>Drives</value>
  </data>
  <data name="EditDefaultKeyEntry" xml:space="preserve">
    <value>Edit default key entry definition</value>
  </data>
  <data name="EditKeyEntry" xml:space="preserve">
    <value>Edit the key entry</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExportToFile" xml:space="preserve">
    <value>Export to file</value>
  </data>
  <data name="Favorite" xml:space="preserve">
    <value>Favorite</value>
  </data>
  <data name="FavoriteHelper" xml:space="preserve">
    <value>Key Store Favorite</value>
  </data>
  <data name="Finish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="FragmentExportPrint" xml:space="preserve">
    <value>Fragment Export / Print</value>
  </data>
  <data name="FragmentInputHelper" xml:space="preserve">
    <value>Key Fragment #</value>
  </data>
  <data name="FragmentManualInput" xml:space="preserve">
    <value>Manual Input</value>
  </data>
  <data name="FragmentValue" xml:space="preserve">
    <value>Fragment Value</value>
  </data>
  <data name="FragmentValueHelper" xml:space="preserve">
    <value>The secret value for the key fragment</value>
  </data>
  <data name="FromFile" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="GenerateKeyEntry" xml:space="preserve">
    <value>Generate Key Entry</value>
  </data>
  <data name="GenerateRandom" xml:space="preserve">
    <value>Generate Random Key</value>
  </data>
  <data name="GenerateWords" xml:space="preserve">
    <value>Generate new words</value>
  </data>
  <data name="GoToParent" xml:space="preserve">
    <value>Go to parent</value>
  </data>
  <data name="ImportCryptogram" xml:space="preserve">
    <value>Import Cryptogram</value>
  </data>
  <data name="ImportFromFile" xml:space="preserve">
    <value>Import from file</value>
  </data>
  <data name="ImportKeyEntryCryptogram" xml:space="preserve">
    <value>Import the key entry cryptogram</value>
  </data>
  <data name="ImportNow" xml:space="preserve">
    <value>Import Now</value>
  </data>
  <data name="KCV" xml:space="preserve">
    <value>KCV</value>
  </data>
  <data name="KCVAlgorithm" xml:space="preserve">
    <value>KCV Algorithm</value>
  </data>
  <data name="KCVAlgorithmHelper" xml:space="preserve">
    <value>The Key Checksum algorithm to use</value>
  </data>
  <data name="KCVHelper" xml:space="preserve">
    <value>The Key Checksum Value</value>
  </data>
  <data name="KeyCeremony" xml:space="preserve">
    <value>Key Ceremony</value>
  </data>
  <data name="KeyCeremonyFragments" xml:space="preserve">
    <value>Fragments</value>
  </data>
  <data name="KeyCeremonyFragmentsHelper" xml:space="preserve">
    <value>Number of key fragments to use during the ceremony</value>
  </data>
  <data name="KeyCeremonyHelper" xml:space="preserve">
    <value>Run a Key Ceremony to recover or share a key value shared between several individuals.</value>
  </data>
  <data name="KeyCeremonyType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="KeyCeremonyTypeHelper" xml:space="preserve">
    <value>Ceremony Type</value>
  </data>
  <data name="KeyCeremonyWizardEnd1" xml:space="preserve">
    <value>The Key Ceremony is now ready to be completed.</value>
  </data>
  <data name="KeyCeremonyWizardEnd2" xml:space="preserve">
    <value>Press the 'Finish' button to complete the ceremony.</value>
  </data>
  <data name="KeyCeremonyWizardStart1" xml:space="preserve">
    <value>Gather all required individuals, prepare all key fragments materials, ensure the environment match the minimal security requirements.</value>
  </data>
  <data name="KeyCeremonyWizardStart2" xml:space="preserve">
    <value>When ready, go to the next step.</value>
  </data>
  <data name="KeyChecksum" xml:space="preserve">
    <value>Checksum</value>
  </data>
  <data name="KeyChecksumHelper" xml:space="preserve">
    <value>Key Checksum</value>
  </data>
  <data name="KeyEntry" xml:space="preserve">
    <value>Key Entry</value>
  </data>
  <data name="KeyEntryCryptogram" xml:space="preserve">
    <value>Cryptogram</value>
  </data>
  <data name="KeyEntryCryptogramHelper" xml:space="preserve">
    <value>The cryptogram containing the key entry details</value>
  </data>
  <data name="KeyEntryEditHelper" xml:space="preserve">
    <value>Confidential information about the Key Entry. Defines its properties and key values.</value>
  </data>
  <data name="KeyEntryIdentifier" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="KeyEntryIdentifierHelper" xml:space="preserve">
    <value>Key Entry Identifier</value>
  </data>
  <data name="KeyEntryLabel" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="KeyEntryLabelHelper" xml:space="preserve">
    <value>Label/note about the key entry.</value>
  </data>
  <data name="KeyEntryLink" xml:space="preserve">
    <value>Key Entry Link</value>
  </data>
  <data name="KeyEntryLinkHelper" xml:space="preserve">
    <value>Compute the Cryptogram to change the Key Entry, from another Key Store.</value>
  </data>
  <data name="KeyEntryProperties" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="KeyEntryType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="KeyEntryTypeHelper" xml:space="preserve">
    <value>The key entry type</value>
  </data>
  <data name="KeyEntryVariant" xml:space="preserve">
    <value>Variant</value>
  </data>
  <data name="KeyEntryVariantHelper" xml:space="preserve">
    <value>The key entry variant</value>
  </data>
  <data name="KeyExportDisclaimer1" xml:space="preserve">
    <value>This document is proprietary, sensitive and confidential. It should not be used, published or redistributed without the owner agreement.</value>
  </data>
  <data name="KeyExportDisclaimer2" xml:space="preserve">
    <value>If you received this document by mistake, please destroy it without further notice and directly report this action to a security officer.</value>
  </data>
  <data name="KeyExportPrint" xml:space="preserve">
    <value>Key Export / Print</value>
  </data>
  <data name="KeyGeneration" xml:space="preserve">
    <value>Local Key Generation</value>
  </data>
  <data name="KeyLink" xml:space="preserve">
    <value>Key Link</value>
  </data>
  <data name="KeyLinkHelper" xml:space="preserve">
    <value>Dump the key value from another Key Store.</value>
  </data>
  <data name="KeySize" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="KeySizeHelper" xml:space="preserve">
    <value>Key Size</value>
  </data>
  <data name="KeyStoreProperties" xml:space="preserve">
    <value>Key Store Properties</value>
  </data>
  <data name="KeyStoreType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="KeyStoreTypeHelper" xml:space="preserve">
    <value>Key Store Type</value>
  </data>
  <data name="KeyTags" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="KeyTagsHelper" xml:space="preserve">
    <value>Key Tags</value>
  </data>
  <data name="KeyValue" xml:space="preserve">
    <value>Key Value</value>
  </data>
  <data name="KeyValueHelper" xml:space="preserve">
    <value>The secret value for the key</value>
  </data>
  <data name="KeyVersion" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="KeyVersionHelper" xml:space="preserve">
    <value>Key Version</value>
  </data>
  <data name="LinkError" xml:space="preserve">
    <value>The link failed with following error:</value>
  </data>
  <data name="LinkHelper" xml:space="preserve">
    <value>Link to another Key Store</value>
  </data>
  <data name="LinkSuccess" xml:space="preserve">
    <value>The link succeeded.</value>
  </data>
  <data name="Mnemonic" xml:space="preserve">
    <value>Mnemonic</value>
  </data>
  <data name="MnemonicHelper" xml:space="preserve">
    <value>Create key from Mnemonic (BIP-39)</value>
  </data>
  <data name="MoveDown" xml:space="preserve">
    <value>Down</value>
  </data>
  <data name="MoveUp" xml:space="preserve">
    <value>Up</value>
  </data>
  <data name="NewFavorite" xml:space="preserve">
    <value>New Favorite Key Store</value>
  </data>
  <data name="NewFolderName" xml:space="preserve">
    <value>New folder</value>
  </data>
  <data name="NewFolderNameHelper" xml:space="preserve">
    <value>Name of the new folder to create</value>
  </data>
  <data name="NewKeyEntry" xml:space="preserve">
    <value>New key entry</value>
  </data>
  <data name="Note" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Passphrase" xml:space="preserve">
    <value>Passphrase</value>
  </data>
  <data name="PassphraseHelper" xml:space="preserve">
    <value>Passphrase</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordDivHelper" xml:space="preserve">
    <value>The password to derivate the key from</value>
  </data>
  <data name="PleaseVisit" xml:space="preserve">
    <value>Please visit</value>
  </data>
  <data name="PublishKeyStore" xml:space="preserve">
    <value>Publish to another Key Store</value>
  </data>
  <data name="QrCode" xml:space="preserve">
    <value>Qr Code</value>
  </data>
  <data name="Random" xml:space="preserve">
    <value>Random</value>
  </data>
  <data name="Salt" xml:space="preserve">
    <value>Salt</value>
  </data>
  <data name="SaltDivHelper" xml:space="preserve">
    <value>The salt to use for key derivation</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchTerms" xml:space="preserve">
    <value>Search Terms</value>
  </data>
  <data name="Secret" xml:space="preserve">
    <value>Secret</value>
  </data>
  <data name="SecretHelper" xml:space="preserve">
    <value>The key store secret</value>
  </data>
  <data name="Seed" xml:space="preserve">
    <value>Seed</value>
  </data>
  <data name="SelectedFolder" xml:space="preserve">
    <value>Selected Folder:</value>
  </data>
  <data name="Selection" xml:space="preserve">
    <value>Selection</value>
  </data>
  <data name="SelectTargetFolder" xml:space="preserve">
    <value>Select Target Folder</value>
  </data>
  <data name="StartSharingKeyCeremony" xml:space="preserve">
    <value>Start the sharing ceremony</value>
  </data>
  <data name="StartUnionKeyCeremony" xml:space="preserve">
    <value>Start the reunification ceremony</value>
  </data>
  <data name="Test" xml:space="preserve">
    <value>Test</value>
  </data>
  <data name="ToggleSelectAll" xml:space="preserve">
    <value>Select/Unselect all</value>
  </data>
  <data name="ToggleSelection" xml:space="preserve">
    <value>Show / Hide key entries selection boxes</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="Wizard" xml:space="preserve">
    <value>Wizard</value>
  </data>
  <data name="Words" xml:space="preserve">
    <value>Words</value>
  </data>
  <data name="WordsHelper" xml:space="preserve">
    <value>Mnemonic words</value>
  </data>
  <data name="WordsLanguage" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="WordsLanguageHelper" xml:space="preserve">
    <value>Words Language</value>
  </data>
  <data name="WrappingKey" xml:space="preserve">
    <value>Wrapping Key</value>
  </data>
</root>